#Область ОбработчикиСобытий

//@skip-check module-accessibility-at-client
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
     Возврат;
    КонецЕсли;
	ТекстДляБота =  СтрШаблон("Клиент: %1, Дата: %2, Время: %3, Описание: ""%4"".",
		Строка(Клиент),
		Строка(Формат(ДатаПроведенияРабот,"ДЛФ=Д")),
		Строка(Формат(ВремяНачалаРабот,"ДЛФ=В")),
		ОписаниеПроблемы); 
		
	
	    Если ЭтоНовый()Тогда
			НовыйЭлемент = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
			НовыйЭлемент.ТекстСообщения = ТекстДляБота;
			НовыйЭлемент.Записать(); 
		КонецЕсли
	
КонецПроцедуры

//@skip-check module-accessibility-at-client
Процедура ОбработкаПроведения(Отказ, Режим)
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.ВидДоговора КАК ВидДоговора,
	|	ДоговорыКонтрагентов.ВКМ_ДатаНачала КАК ДатаНачала,
	|	ДоговорыКонтрагентов.ВКМ_ДатаОкончания КАК ДатаОкончания,
	|	ДоговорыКонтрагентов.ВКМ_СтоимостьЧаса КАК СтоимостьЧаса,
	|	ВКМ_УсловияОплатыСотрудников.ПроцентОтРабот КАК ПроцентОтРабот
	|ИЗ
	|	Документ.ВКМ_ОбслуживаниеКлиента КАК ВКМ_ОбслуживаниеКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ВКМ_ОбслуживаниеКлиента.Договор = ДоговорыКонтрагентов.Ссылка,
	|	РегистрСведений.ВКМ_УсловияОплатыСотрудников КАК ВКМ_УсловияОплатыСотрудников
	|ГДЕ
	|	ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
	|	И ВКМ_ОбслуживаниеКлиента.Ссылка = &Ссылка
	|	И ВКМ_УсловияОплатыСотрудников.Сотрудник = &Специалист";
	
	Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.ВКМ_АбонентскоеОбслуживание);  
	Запрос.УстановитьПараметр("Ссылка", Ссылка);  
	Запрос.УстановитьПараметр("Специалист", Специалист);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если РезультатЗапроса.Пустой() Тогда 
		//@skip-check use-non-recommended-method
		Сообщить("Нет данных о специалисте либо не указан абонентский договор");
		Отказ = Истина;
		Возврат
	КонецЕсли; 
	
	Пока Выборка.Следующий() Цикл	
		Если НЕ (КонецДня(ДатаПроведенияРабот) >  НачалоДня(Выборка.ДатаНачала)
			И ДатаПроведенияРабот <  КонецДня(Выборка.ДатаОкончания)) Тогда 
			//@skip-check use-non-recommended-method
			Сообщить("Истек срок обслуживания абонента");
			Отказ = Истина;
			Возврат
		КонецЕсли; 
		

		Движения.ВКМ_ВыполненныеКлиентуРаботы.Записывать = Истина; 
		Движения.ВКМ_ВыполненныеСотрудникомРаботы.Записывать = Истина;
				
		Для Каждого ТекСтрокаВыполненныеРаботы Из ВыполненныеРаботы Цикл
		// регистр ВКМ_ВыполненныеКлиентуРаботы Расход	
			Движение = Движения.ВКМ_ВыполненныеКлиентуРаботы.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Период = Дата;
			Движение.Клиент = Клиент;
			Движение.Договор = Договор;
			Движение.КоличествоЧасов = ТекСтрокаВыполненныеРаботы.ЧасыКОплате;
			Движение.СуммаКОплате = Движение.КоличествоЧасов * Выборка.СтоимостьЧаса ;
		// регистр ВКМ_ВыполненныеСотрудникомРаботы Расход
	        Движение = Движения.ВКМ_ВыполненныеСотрудникомРаботы.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Период = Дата;
			Движение.Сотрудник = Специалист;
			Движение.ЧасовКОплате = ТекСтрокаВыполненныеРаботы.ЧасыКОплате;
			Движение.СуммаКОплате = ТекСтрокаВыполненныеРаботы.ЧасыКОплате * Выборка.СтоимостьЧаса 
										* Выборка.ПроцентОтРабот / 100;
		КонецЦикла;
	    Движения.ВКМ_ВыполненныеСотрудникомРаботы.Записать();
		Движения.ВКМ_ВыполненныеКлиентуРаботы.Записать(); 
	
	КонецЦикла; 
			
	КонецПроцедуры

 #КонецОбласти

		








